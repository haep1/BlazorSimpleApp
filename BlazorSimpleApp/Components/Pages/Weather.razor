@page "/weather"
@using BlazorSimpleApp.GeoLocation
@using BlazorSimpleApp.Models
@using BlazorSimpleApp.Services
@using BlazorSimpleApp.Components.Layout
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject IGeoLocationBroker GeoLocationBroker
@inject GeocodingService GeocodingService

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (_hourlyForecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <p>@_message</p>
    <br/>
    <br/>
    <h2>Weather Assistant:</h2>
    <br/>
    <MarkupRenderer Markup="@_forecastInterpretation" />

    <table class="table">
        <thead>
        <tr>
            <th>Hour</th>
            <th>Temp. (C)</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in _hourlyForecasts)
        {
            var currentHour = DateTime.Now.Hour;
            var forecastHour = forecast.Hour.Hour;
            var currentDay = DateTime.Now.Day;
            var forecastDay = forecast.Hour.Day;
            <tr class="@(forecastHour == currentHour && forecastDay == currentDay ? "current-hour" : "")">
                <td>@forecast.Hour.ToShortDateString() - @forecast.Hour.ToShortTimeString()</td>
                <td>@Math.Round(forecast.Temperature)</td>
            </tr>
        }
        </tbody>
    </table>
}

<script>
    document.addEventListener('DOMContentLoaded', (event) => {
        document.querySelectorAll('.current-hour').forEach(element => {
            element.style.display = 'none';
            element.offsetHeight; // Trigger a reflow
            element.style.display = '';
        });
    });
</script>

@code {
    private HourlyWeather[]? _hourlyForecasts;
    private bool _isRendered;
    private string _message = string.Empty;
    private string? _forecastInterpretation = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GeoLocationBroker.CoordinatesChanged += OnCoordinatesChanged;
            GeoLocationBroker.OnGeolocationPositionError += OnGeolocationPositionError;
            await GeoLocationBroker.RequestGeoLocationAsync();
            _isRendered = true;
        }
    }

    private async ValueTask OnCoordinatesChanged(Coordinate coordinates)
    {
        if (_isRendered)
        {
            _message = $"Latitude: {coordinates.Latitude}, Longitude: {coordinates.Longitude}";
            var forecast = (await WeatherApiService.GetWeather((float)coordinates.Latitude, (float)coordinates.Longitude));
            _hourlyForecasts = forecast?.ToArray();
            var city = await GeocodingService.GetNearestCityAsync(coordinates.Latitude, coordinates.Longitude);
            if (forecast != null && city != null)
            {
                _forecastInterpretation = await WeatherApiService.GetWeatherInterpretation(forecast, city);
                _message += $", Nearest City: {city}";
            }
            await InvokeAsync(StateHasChanged);
        }
    }

    private async ValueTask OnGeolocationPositionError(GeolocationPositionError error)
    {
        if (_isRendered)
        {
            _message = $"Error: {error.Message}";
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        GeoLocationBroker.CoordinatesChanged -= OnCoordinatesChanged;
        GeoLocationBroker.OnGeolocationPositionError -= OnGeolocationPositionError;
    }

}